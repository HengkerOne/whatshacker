# SECURE PYTHON RUNTIME LOADER - Generated by Professional Builder
import marshal
import sys
import hashlib
import base64
import builtins
import hmac
import os
import time
from cryptography.fernet import Fernet 
import binascii 
# ============================================================
# Ninja Toolkit - HengkerOne - Script Kiddie - Whats hacker Exploitasi
# ------------------------------------------------------------------------------------------------------------------------
# Copyright (c) 2025 Ninja Toolkit Developers
# License: Ninja Toolkit
#
#THE SOFTWARE IS PROVIDED "HENGKERONE", WITHOUT WARRANTY OF ANY KIND.
# ============================================================
ITERATIONS = 600000
KEY_LEN = 44 
RANDOM_SALT_B64 = 'SShnHdlCy0MA2gXf0H4xHQ=='
PASSPHRASE_B64 = 'TXlVbHRyYVNlY3VyZVBocmEkZVcxdGhSQG5EMG1OdW1iM3JaIQ==' 
HMAC_KEY_DERIVATION_SALT = b'HMAC_SALT_FOR_INTEGRITY'
OBFUSCATED_FERNET_KEY_HEX = "40e09c90cf9cb04b1d0dfd7e07f5a697486044d8a43878f21b3cf806215ad0064231cb80cdba485e5cd3bf1b"
ENCRYPTED_DATA_B64 = ""
EXPECTED_HMAC = "d4abfbb2bf22010b21c1b03935c0c5a94f5ee4e55cec295eb05a2f212e8fab27"

def check_debugger():
    if getattr(sys, 'gettrace')() is not None:
        return True
    try:
        with open('/proc/self/status', 'r') as f:
            if 'TracerPid:\t0' not in f.read():
                return True
    except Exception:
        pass
    return False

def key_derivation(salt_bytes, passphrase_bytes, iterations):
    xor_key = hashlib.pbkdf2_hmac(
        'sha256', 
        passphrase_bytes + salt_bytes, 
        salt_bytes, 
        iterations, 
        dklen=int(KEY_LEN)
    )
    return xor_key

if check_debugger():
    sys.exit(0)

try:
    PASSPHRASE_BYTES = base64.b64decode(PASSPHRASE_B64)
    
    RANDOM_SALT = base64.b64decode(RANDOM_SALT_B64)
    
    XOR_KEY = key_derivation(RANDOM_SALT, PASSPHRASE_BYTES, ITERATIONS)
    
    obfuscated_key_bytes = bytes.fromhex(OBFUSCATED_FERNET_KEY_HEX)
    FERNET_KEY = bytes([a ^ b for a, b in zip(obfuscated_key_bytes, XOR_KEY)])
    
    if len(FERNET_KEY) != int(KEY_LEN):
        raise ValueError("Key length mismatch after XOR.")
    
    HMAC_KEY = hashlib.sha256(PASSPHRASE_BYTES + RANDOM_SALT + HMAC_KEY_DERIVATION_SALT).digest()
    
    final_cipher = Fernet(FERNET_KEY)

except Exception:
    print("❌ Error Derivasi Kunci: " + str(sys.exc_info()[1]))
    sys.exit(1)


try:
    encrypted_data = base64.b64decode(ENCRYPTED_DATA_B64)

    current_hmac = hmac.new(HMAC_KEY, encrypted_data, hashlib.sha256).hexdigest()
    
    if not hmac.compare_digest(current_hmac, EXPECTED_HMAC):
        print("❌ Deteksi Tampering Data (HMAC Failed). Menghentikan eksekusi.")
        sys.exit(1)
    
    decrypted_data = final_cipher.decrypt(encrypted_data)

    code_object = marshal.loads(decrypted_data)
    getattr(builtins, 'exec')(code_object)

except Exception:
    print("❌ Gagal memulai runtime aman. Kode mungkin rusak atau dimodifikasi.")
    print("DEBUG ERROR: " + str(sys.exc_info()[1]))
    sys.exit(1)
